name: üöÄ Release & Publish

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'

jobs:
  # First job: Run CI tests
  test:
    name: üß™ Test & Validate
    runs-on: ubuntu-latest
    steps:
      - name: üõéÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üß™ Run tests
        run: npm run test:coverage

      - name: üèóÔ∏è Build project
        run: npm run build

  # Second job: Create release and publish
  release:
    name: üì¶ Create Release & Publish
    runs-on: ubuntu-latest
    needs: test
    if: "!contains(github.event.head_commit.message, 'chore(release)')"
    permissions:
      contents: write
      id-token: write

    steps:
      - name: üõéÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build project
        run: npm run build

      - name: üîç Check for changes
        id: check-changes
        run: |
          if git diff --quiet HEAD~1 HEAD -- src/ package.json; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: üè∑Ô∏è Generate release
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          npm run release

      - name: üöÄ Push changes
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          git push --follow-tags origin main

      - name: üì¢ Create GitHub Release
        if: steps.check-changes.outputs.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0)

          # Extract changelog for this version (with fallback)
          if [ -f "CHANGELOG.md" ]; then
            CHANGELOG_CONTENT=$(sed -n "/## \[$(echo $LATEST_TAG | sed 's/v//')\]/,/## \[/{/## \[$(echo $LATEST_TAG | sed 's/v//')\]/!{/## \[/q};p}" CHANGELOG.md | head -n -1 || echo "Release $LATEST_TAG")
          else
            CHANGELOG_CONTENT="Release $LATEST_TAG"
          fi

          # Create GitHub release
          gh release create $LATEST_TAG \
            --title "Release $LATEST_TAG" \
            --notes "$CHANGELOG_CONTENT" \
            --latest

      - name: üì¶ Publish to NPM
        if: steps.check-changes.outputs.changes == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public
